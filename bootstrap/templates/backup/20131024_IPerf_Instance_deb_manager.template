{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template WordPress_Single_Instance: WordPress is web software you can use to create a beautiful website or blog. This template installs a single-instance WordPress deployment using a local MySQL database to store the data.",

  "Parameters" : {

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String"
    },
    "ProvHost" : {
      "Type" : "String"
    },
    "SubnetId" : {
      "Type" : "String",
      "Description" : "Id of an existing subnet"
    },
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "m1.tiny", "m1.small", "m1.medium", "m1.large", "m1.xlarge" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "LinuxDistribution": {
      "Default": "U12",
      "Description" : "Distribution of choice",
      "Type": "String",
      "AllowedValues" : [ "U12" ]
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "m1.tiny"    : { "Arch" : "32" },
      "m1.small"    : { "Arch" : "64" },
      "m1.medium"    : { "Arch" : "64" },
      "m1.large"   : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" }
    },
    "DistroArch2AMI": {
      "U12"      : { "32" : "U12-x86_64-cfntools-matplotlib", "64" : "U12-x86_64-cfntools-matplotlib" }
    }
  },

  "Resources" : {
    "TestServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "services" : {
              "sysvinit" : {
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "DistroArch2AMI", { "Ref" : "LinuxDistribution" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "KeyName"        : { "Ref" : "KeyName" },
        "SubnetId" : { "Ref" : "SubnetId" },
        "AvailabilityZone" : {"Ref": "ProvHost"},
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "mkdir /home/openstack/verification\n",
          "chmod 777 /home/openstack/verification\n",
          "mkdir /home/openstack/verification/cgi-bin\n",
          "chown -R openstack:openstack /home/openstack/verification/cgi-bin\n",
          "cat > /home/openstack/verification/cgi-bin/verify.py <<EOF\n",
          "#!/usr/bin/env python\n",
          "\n",
          "import subprocess\n",
          "import os\n",
          "\n",
          "subprocess.Popen([\"/usr/bin/python\", os.path.abspath(os.path.dirname(__file__)) + \"/verification.py\"])\n",
          "EOF\n",
          "chmod 755 /home/openstack/verification/cgi-bin/verify.py\n",
          "cat > /home/openstack/verification/cgi-bin/verification.py <<EOF\n",
          "#!/usr/bin/env python\n",
          "\n",
          "import subprocess\n",
          "import os\n",
          "import commands\n",
          "import matplotlib\n",
          "matplotlib.use('Agg')\n",
          "\n",
          "from pylab import *\n",
          "fpath = os.path.abspath(os.path.dirname(__file__)) + \"/../ipaddress.txt\"\n",
          "CURL_ORG=\"curl -s -X POST 'http://%s:18000/cgi-bin/verify.py' -d '%s'\"\n",
          "CURL_OPT=\" -d '%s'\"\n",
          "COUNT=sum(1 for line in open(fpath))\n",
          "f = open(fpath)\n",
          "targets=[]\n",
          "for ip in f:\n",
          "#        targets.append(CURL_ORG % (ip.strip('\\n'), \"&selfip=\" + ip.strip('\\n') + \"&count=5\"))\n",
          "        targets.append(ip.strip('\\n'))\n",
          "f.close()\n",
          "\n",
          "f = open(fpath)\n",
          "fig = plt.figure(1, figsize=(8, 3*COUNT))\n",
          "i=1\n",
          "for ip in f:\n",
          "        for target in targets:\n",
          "            if target == ip.strip('\\n'):\n",
          "                continue\n",
          "#            tmp = target + CURL_OPT % (\"&ip=\" + ip.strip('\\n'))\n",
          "            tmp = CURL_ORG % (target, \"&selfip=\" + target + \"&count=5\") + CURL_OPT % (\"&ip=\" + ip.strip('\\n'))\n",
          "            print \"tmp : %s\" % tmp\n",
          "            ret = commands.getoutput(tmp)\n",
          "            data=[]\n",
          "            x=[]\n",
          "            ii=1\n",
          "            for d in ret.split(','):\n",
          "                if len(d):\n",
          "#                   data.append([i, int(d)])\n",
          "                    data.append(int(d)/1000)\n",
          "                    x.append(int(ii))\n",
          "                    ii+=1\n",
          "            if len(data):\n",
          "                print data\n",
          "                print i\n",
          "#               plt.plot(x, data)\n",
          "                plt.subplot(COUNT, 1, i)\n",
          "                plt.plot(x, data, label = \"for \" + ip.strip('\\n'), marker=\"o\")\n",
          "                plt.legend(loc = 'upper right', prop={'size':8})\n",
          "#                plt.legend(loc = 'upper left', bbox_to_anchor = (1.02, 1), borderaxespad=0)\n",
          "#                plt.legend(loc = 'upper center', bbox_to_anchor = (0.5, -0.3), ncol = len(targets)-1)\n",
          "#                plt.plot(x, data, \"b\")\n",
          "                plt.xlim([0.5, len(x)+1.5])\n",
          "                plt.xticks(x)\n",
          "                plt.title('Througput of ' + target, fontsize = 16)\n",
          "                plt.ylabel('Throughput (KB)', fontsize = 12)\n",
          "                plt.xlabel('Cycle', fontsize = 12)\n",
          "#               filename = \"/../\"+ ip.strip('\\n')  +\".png\"\n",
          "#               plt.savefig(os.getcwd() + filename)\n",
          "#               plt.close()\n",
          "        i+=1\n",
          "plt.subplots_adjust(hspace = 0.6)\n",
          "#plt.gcf().subplots_adjust(bottom=0.40)\n",
          "fig.savefig(os.path.abspath(os.path.dirname(__file__)) + \"/../result.png\")\n",
          "f.close()\n",
          "commands.getoutput(\"/usr/bin/python \" + os.path.abspath(os.path.dirname(__file__)) + \"/verify_result.py\")\n",
          "EOF\n",
          "chmod 755 /home/openstack/verification/cgi-bin/verification.py\n",
          "cat > /home/openstack/verification/cgi-bin/verify_result.py <<EOF\n",
          "#!/usr/bin/env python\n",
          "\n",
          "import os\n",
          "import sys\n",
          "from string import Template\n",
          "import base64\n",
          "import datetime\n",
          "\n",
          "def get_now():\n",
          "        now = datetime.datetime.now()\n",
          "        return now.strftime(\"%Y/%m/%d %H:%M:%S\")\n",
          "\n",
          "if (os.path.exists(\"/home/openstack/verification/result.html\")):\n",
          "        os.system(\"rm -rf /home/openstack/verification/result.html\")\n",
          "\n",
          "f=open(\"/home/openstack/verification/template/result.tmpl\")\n",
          "data=f.read()\n",
          "tmpl=Template(unicode(data,\"utf-8\",\"ignore\"))\n",
          "fpath = os.path.abspath(os.path.dirname(__file__)) + \"/../result.png\"\n",
          "img=open(fpath)\n",
          "img_enc=base64.b64encode(img.read())\n",
          "ret=\"<img src='data:image/png;base64,\"+img_enc+\"'>\"\n",
          "ret+=\"<br>Creation Date : \" + get_now()\n",
          "body=tmpl.substitute({\"body\":ret.encode(\"utf-8\")})\n",
          "fw=open(os.path.abspath(os.path.dirname(__file__)) + \"/../result.html\", \"w\")\n",
          "fw.write(body)\n",
          "f.close()\n",
          "img.close()\n",
          "EOF\n",
          "chmod 755 /home/openstack/verification/cgi-bin/verify_result.py\n",
          "mkdir /home/openstack/verification/template\n",
          "chown -R openstack:openstack /home/openstack/verification/template\n",
          "cat > /home/openstack/verification/template/result.tmpl <<EOF\n",
          "<html>\n",
          "<head>\n",
          "<meta content-type=\"text/html\" charset=\"UTF-8\">\n",
          "<title>Bootstrap for Verification</title>\n",
          "</head>\n",
          "<body>\n",
          "<div align=\"center\">\n",
          "\\${body}\n",
          "</div>\n",
          "</body>\n",
          "</html>\n",
          "EOF\n",
          "sudo sh -c \"echo 'StrictHostKeyChecking=no' >> /etc/ssh/ssh_config\"\n"
        ]]}}
      }
    }
  },

  "Outputs" : {
  }
}
